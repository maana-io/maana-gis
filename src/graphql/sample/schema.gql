# Scalars
scalar Date
scalar JSON

# Boilerplate
type Info {
  id: ID!
  name: String!
  version: String
  description: String
}

# primitive types
type Meters {
  id: ID!
  value: Float!
}

input MetersInput {
  id: ID
  value: Float!
}

type Degrees {
  id: ID!
  value: Float!
}

input DegreesInput {
  id: ID
  value: Float!
}

# decimal format
type GeoCoordinateD {
  id: ID!
  latitude: Float!
  longitude: Float!
}

input GeoCoordinateDInput {
  id: ID
  latitude: Float!
  longitude: Float!
}

# sexagesimal format
type GeoCoordinateS {
  id: ID!
  latitude: String!
  longitude: String!
}

input GeoCoordinateSInput {
  id: ID
  latitude: String!
  longitude: String!
}

# union
type GeoCoordinateU {
  id: ID!
  coordinateD: GeoCoordinateD
  coordinateS: GeoCoordinateS
}

input GeoCoordinateUInput {
  id: ID
  coordinateD: GeoCoordinateDInput
  coordinateS: GeoCoordinateSInput
}

# Query Root
type Query {
  # Boilerplate
  info: Info

  #
  # Constructors
  #
  makeGeoCoordinateD(latitude: Float!, longitude: Float!): GeoCoordinateD!
  makeGeoCoordinateS(latitude: String!, longitude: String!): GeoCoordinateS!

  #
  # Projectors
  #
  getGeoCoordinateDId(coordinate: GeoCoordinateDInput!): ID!
  getGeoCoordinateDLatitude(coordinate: GeoCoordinateDInput!): Float!
  getGeoCoordinateDLongitude(coordinate: GeoCoordinateDInput!): Float!

  getGeoCoordinateSId(coordinate: GeoCoordinateSInput!): ID!
  getGeoCoordinateSLatitude(coordinate: GeoCoordinateSInput!): String!
  getGeoCoordinateSLongitude(coordinate: GeoCoordinateSInput!): String!

  #
  # Conversions
  #
  sexagesimalToDecimal(input: String!): Float!
  decimalToSexagesimal(input: Float!): String!
  convertGeoCoordinateSToD(coordinate: GeoCoordinateSInput!): GeoCoordinateD!
  convertGeoCoordinateDToS(coordinate: GeoCoordinateDInput!): GeoCoordinateS!

  #
  # Parsers
  #
  parseGeoCoordinate(input: String!): GeoCoordinateU!
  parseGeoCoordinateOpt(input: String!): GeoCoordinateU

  #
  # Distances
  #
  distanceD(
    start: GeoCoordinateDInput!
    end: GeoCoordinateDInput!
    accuracy: MetersInput # default: 1m
  ): Meters!

  distanceS(
    start: GeoCoordinateSInput!
    end: GeoCoordinateSInput!
    accuracy: MetersInput # default: 1m
  ): Meters!

  preciseDistanceD(
    start: GeoCoordinateDInput!
    end: GeoCoordinateDInput!
    accuracy: MetersInput # default: 1m
  ): Meters!

  preciseDistanceS(
    start: GeoCoordinateSInput!
    end: GeoCoordinateSInput!
    accuracy: MetersInput # default: 1m
  ): Meters!

  #
  # Centers
  #
  centerD(coordinates: [GeoCoordinateDInput!]!): GeoCoordinateD!
  centerS(coordinates: [GeoCoordinateSInput!]!): GeoCoordinateS!

  #
  #
  #
  computeDestinationPointD(
    point: GeoCoordinateDInput!
    distance: MetersInput!
    bearing: DegreesInput!
    radius: MetersInput # = earthRadius
  ): GeoCoordinateD!
}
